import logging
import os
import sqlite3
import asyncio
import datetime
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hcode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiohttp import web

# Load .env variables
load_dotenv()

# --- Configuration from Environment Variables ---
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEB_SERVER_URL = os.getenv("WEB_SERVER_URL") # Example: https://your-render-app.onrender.com

# --- Bot Initialization ---
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# --- FSM States for Profile Setup ---
class ProfileSetup(StatesGroup):
    name = State()
    phone = State()
    email = State()
    bkash = State()
    binance_id = State()
    youtube = State()
    facebook = State()
    tiktok = State()
    website = State()
    about_yourself = State()

# --- FSM States for Withdrawal ---
class Withdrawal(StatesGroup):
    amount = State()
    payment_method = State()
    comment = State()

# --- SQLite Database Setup ---
conn = sqlite3.connect("bot.db")
cur = conn.cursor()

# Create/Update tables
# employees table: user details and profile info, now with banned and is_editor flags
cur.execute("""
CREATE TABLE IF NOT EXISTS employees (
    username TEXT PRIMARY KEY,
    telegram_id INTEGER UNIQUE,
    is_admin BOOLEAN DEFAULT 0,
    is_editor BOOLEAN DEFAULT 0,
    profile_set BOOLEAN DEFAULT 0,
    banned BOOLEAN DEFAULT 0,
    full_name TEXT,
    phone_number TEXT,
    email TEXT,
    bkash_number TEXT,
    binance_id TEXT,
    youtube_link TEXT,
    facebook_link TEXT,
    tiktok_link TEXT,
    website_link TEXT,
    about_yourself TEXT,
    total_visits INTEGER DEFAULT 0,
    total_clicks INTEGER DEFAULT 0,
    usdt_balance REAL DEFAULT 0.0
)
""")

# domains table: to store allowed movie site domains (from previous)
cur.execute("""
CREATE TABLE IF NOT EXISTS domains (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    base_url TEXT
)
""")

# global_tasks table: for a single task assigned to all employees (from previous)
cur.execute("""
CREATE TABLE IF NOT EXISTS global_tasks (
    id INTEGER PRIMARY KEY DEFAULT 1,
    task_identifier TEXT,
    domain_id INTEGER,
    last_set_date TEXT,
    FOREIGN KEY (domain_id) REFERENCES domains(id)
)
""")

# individual_tasks table: for tasks assigned to specific employees (from previous)
cur.execute("""
CREATE TABLE IF NOT EXISTS individual_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    employee_username TEXT,
    task_identifier TEXT,
    domain_id INTEGER,
    assigned_by TEXT,
    assigned_date TEXT DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending',
    FOREIGN KEY (employee_username) REFERENCES employees(username),
    FOREIGN KEY (domain_id) REFERENCES domains(id)
)
""")

# clicks table: to track user clicks and duration, now with more details
cur.execute("""
CREATE TABLE IF NOT EXISTS clicks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ref_by_employee TEXT, -- The employee's username
    viewer_telegram_id INTEGER, -- The Telegram ID of the user who clicked
    viewer_username TEXT, -- The Telegram username of the user who clicked
    viewer_full_name TEXT, -- The Telegram full name of the user who clicked
    user_agent TEXT, -- Browser user agent
    page_url TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    is_visit BOOLEAN DEFAULT 0, -- True if stayed >= 12 seconds
    is_click BOOLEAN DEFAULT 0, -- True if detected, regardless of duration
    is_telegram_browser BOOLEAN DEFAULT 0, -- True if opened in Telegram's internal browser
    unique_daily_key TEXT UNIQUE -- For 20 visits per day limit (username + date + ref_by_employee + page_url)
)
""")

# New tables for public lists
cur.execute("""
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    description TEXT,
    link TEXT UNIQUE
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS earning_bots (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    description TEXT,
    link TEXT UNIQUE
)
""")

# Global settings for visit to USDT rate
cur.execute("""
CREATE TABLE IF NOT EXISTS global_settings (
    key TEXT PRIMARY KEY,
    value TEXT
)
""")
# Initialize default USDT rate if not exists
cur.execute("INSERT OR IGNORE INTO global_settings (key, value) VALUES (?, ?)", ('usdt_rate_per_1000_visits', '1.00'))

# New table for withdrawal requests
cur.execute("""
CREATE TABLE IF NOT EXISTS withdraw_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    employee_username TEXT,
    usdt_amount REAL,
    payment_method TEXT, -- 'Bkash' or 'Binance'
    payment_detail TEXT, -- The Bkash number or Binance ID from profile
    comment TEXT, -- User's 60 char comment
    request_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending', -- 'pending', 'approved', 'rejected'
    FOREIGN KEY (employee_username) REFERENCES employees(username)
)
""")

conn.commit()

# --- Helper functions ---
def is_admin(user_id):
    return str(user_id) == ADMIN_CHAT_ID

def is_editor(user_id):
    cur.execute("SELECT is_editor FROM employees WHERE telegram_id = ?", (user_id,))
    result = cur.fetchone()
    return result and result[0] == 1

# --- Telegram Bot Command Handlers ---

# START Command - Improved Welcome Message & Public Commands
@dp.message(CommandStart())
async def send_welcome(message: types.Message, state: FSMContext):
    user_username = message.from_user.username
    user_id = message.from_user.id

    welcome_message = (
        "ЁЯСЛ <b>рж╕рзНржмрж╛ржЧрждржо!</b> ржПржЗ ржмржЯ ржЖржкржирж╛ржХрзЗ ржЕржирж▓рж╛ржЗржирзЗ ржЖржпрж╝ ржХрж░рж╛рж░ ржЪржорзОржХрж╛рж░ рж╕рзБржпрзЛржЧ ржХрж░рзЗ ржжрзЗржмрзЗред рж╕рж╣ржЬ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзЗ ржЖржкржирж┐ рж╕рж╣ржЬрзЗржЗ USDT ржЙржкрж╛рж░рзНржЬржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!\n\n"
        "Hello! This bot offers you an excellent opportunity to earn online. Complete simple tasks and easily earn USDT!\n\n"
    )
    
    # Check if user is an employee
    cur.execute("SELECT profile_set, banned FROM employees WHERE username = ? OR telegram_id = ?", (user_username, user_id))
    employee_status = cur.fetchone()

    is_already_employee = False
    profile_is_set = False
    is_banned = False

    if employee_status:
        is_already_employee = True
        profile_is_set = employee_status[0]
        is_banned = employee_status[1]

    if is_banned:
        welcome_message += "ЁЯЪл ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржПржЗ ржмржЯ ржерзЗржХрзЗ ржирж┐рж╖рж┐ржжрзНржз (banned) рж╣ржпрж╝рзЗржЫрзЗржиред ржЖржкржирж┐ ржХрзЛржирзЛ ржХрж╛рж░рзНржпржХрзНрж░ржо ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред"
        await message.reply(welcome_message, parse_mode=ParseMode.HTML)
        return

    if is_already_employee:
        welcome_message += "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: <b>ржПржоржкрзНрж▓рзЯрж┐</b>\n\n"
        if not profile_is_set:
            welcome_message += "тЪая╕П ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ `/set_profile` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рзБржиред"
            # Start profile setup FSM if not set
            await state.set_state(ProfileSetup.name)
            await message.answer("ржЖржкржирж╛рж░ <b>ржкрзБрж░рзЛ ржирж╛ржо</b> рж▓рж┐ржЦрзБржи:") # Initial prompt for profile setup
            return # Exit early to proceed with FSM
    else:
        welcome_message += "ржЖржкржирж┐ ржХрж┐ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рждрзЗ ржЪрж╛ржи? `/join_employee` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЬржи ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣рж┐рж╕рзЗржмрзЗ ржпрзБржХрзНржд рж╣ржи!\n\n"
        
    welcome_message += (
        "ЁЯМР <b>рж╕рж╛ржзрж╛рж░ржг ржХржорж╛ржирзНржбрж╕ржорзВрж╣:</b>\n"
        "/bot_info - ржПржЗ ржмржЯ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирзБржи\n"
        "/help_group - рж╕рж╛рж╣рж╛ржпрзНржп ржкрзЗрждрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи\n"
        "/contact - ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\n"
        "/channel_list - ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛ ржжрзЗржЦрзБржи\n"
        "/earning_bot_list - ржЖржпрж╝рзЗрж░ ржЕржирзНржпрж╛ржирзНржп ржмржЯ ржжрзЗржЦрзБржи\n"
        "/site_list - ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯржЧрзБрж▓рзЛ ржжрзЗржЦрзБржи\n"
        "/em_cmd - ржПржоржкрзНрж▓ржпрж╝рж┐ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛ (ржпржжрж┐ ржЖржкржирж┐ ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣ржи)\n"
    )
    await message.reply(welcome_message, parse_mode=ParseMode.HTML)


# --- Public Commands ---
@dp.message(Command("bot_info"))
async def bot_info_handler(message: types.Message):
    info_text = (
        "ЁЯдЦ <b>ржЖрж▓рзБржорж┐ржирзНржЯ ржЯрж╛рж╕рзНржХ ржмржЯ - ржЖржкржирж╛рж░ ржЖржпрж╝рзЗрж░ рж╕ржЩрзНржЧрзА!</b>\n\n"
        "ржПржЗ ржмржЯржЯрж┐ ржЖржкржирж╛ржХрзЗ ржмрж┐ржнрж┐ржирзНржи ржЕржирж▓рж╛ржЗржи ржЯрж╛рж╕рзНржХ (ржпрзЗржоржи ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ, ржнрж┐ржбрж┐ржУ ржжрзЗржЦрж╛) рж╕ржорзНржкржирзНржи ржХрж░рж╛рж░ ржорж╛ржзрзНржпржорзЗ рж╕рж╣ржЬ ржЙржкрж╛ржпрж╝рзЗ USDT ржЙржкрж╛рж░рзНржЬржи ржХрж░рж╛рж░ рж╕рзБржпрзЛржЧ ржжрзЗржпрж╝ред ржЖржорж╛ржжрзЗрж░ ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣рж┐рж╕рзЗржмрзЗ ржпрзЛржЧ ржжрж┐ржпрж╝рзЗ ржЖржкржирж┐ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржнрж┐ржЬрж┐ржЯрж░ ржПржирзЗ ржЖржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржЖржкржирж╛рж░ ржХрж╛ржЬрзЗрж░ ржЕржЧрзНрж░ржЧрждрж┐, ржЖржпрж╝ ржПржмржВ ржкрзЗржорзЗржирзНржЯрзЗрж░ рждржерзНржп ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n"
        "<b>English:</b>\n"
        "ЁЯдЦ <b>Alumint Task Bot - Your Earning Companion!</b>\n\n"
        "This bot provides you with an easy way to earn USDT by completing various online tasks (like website visits, watching videos). By joining as our employee, you can earn by bringing visitors through your referral links. Here, you can track your work progress, earnings, and payment information."
    )
    await message.reply(info_text, parse_mode=ParseMode.HTML)

@dp.message(Command("help_group"))
async def help_group_handler(message: types.Message):
    await message.reply("Need help? Join our support group here: [ZflixCO Group](https://t.me/zflixcogroup)", parse_mode=ParseMode.HTML)

@dp.message(Command("contact"))
async def contact_handler(message: types.Message):
    await message.reply("For business inquiries or direct support, contact us: @zflix_contract", parse_mode=ParseMode.HTML)

@dp.message(Command("channel_list"))
async def channel_list_handler(message: types.Message):
    cur.execute("SELECT name, description, link FROM channels")
    channels = cur.fetchall()
    if not channels:
        return await message.reply("тД╣я╕П ржХрзЛржирзЛ ржЪрзНржпрж╛ржирзЗрж▓ ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")
    
    channel_text = "ЁЯУв <b>ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рж╕ржорзВрж╣:</b>\n\n"
    for name, desc, link in channels:
        channel_text += f"<b>{name}</b>\n{desc}\n[Join Channel]({link})\n\n"
    await message.reply(channel_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message(Command("earning_bot_list"))
async def earning_bot_list_handler(message: types.Message):
    cur.execute("SELECT name, description, link FROM earning_bots")
    bots = cur.fetchall()
    if not bots:
        return await message.reply("тД╣я╕П ржХрзЛржирзЛ ржЖржпрж╝рзЗрж░ ржмржЯ ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")
    
    bot_text = "ЁЯТ░ <b>ржЖржпрж╝рзЗрж░ ржЕржирзНржпрж╛ржирзНржп ржмржЯ:</b>\n\n"
    for name, desc, link in bots:
        bot_text += f"<b>{name}</b>\n{desc}\n[Start Bot]({link})\n\n"
    await message.reply(bot_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message(Command("site_list"))
async def site_list_handler(message: types.Message):
    cur.execute("SELECT name, base_url FROM domains")
    domains = cur.fetchall()
    if not domains:
        return await message.reply("тД╣я╕П ржХрзЛржирзЛ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")
    
    site_text = "ЁЯМР <b>ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрж╕ржорзВрж╣:</b>\n\n"
    for name, url in domains:
        site_text += f"<b>{name}</b>\n[ржнрж┐ржЬрж┐ржЯ ржХрж░рзБржи]({url})\n\n"
    await message.reply(site_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)


# --- Admin Commands for Public Lists ---
@dp.message(Command("add_channel"))
async def add_channel_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        parts = message.text.split(" ", 3) # /add_channel Name: Desc: Link:
        if len(parts) < 4 or not all(p.endswith(":") for p in parts[1:3]):
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /add_channel Channel Name: <name> Channel Description: <desc> Channel Link: <link>")
        
        # Simple parsing for now, could be more robust
        channel_name = parts[1].replace("Name:", "").strip()
        channel_desc = parts[2].replace("Description:", "").strip()
        channel_link = parts[3].replace("Link:", "").strip()

        cur.execute("INSERT INTO channels (name, description, link) VALUES (?, ?, ?)", (channel_name, channel_desc, channel_link))
        conn.commit()
        await message.reply(f"тЬЕ ржЪрзНржпрж╛ржирзЗрж▓ '{channel_name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛред")
    except sqlite3.IntegrityError:
        await message.reply(f"тЪая╕П ржПржЗ ржЪрзНржпрж╛ржирзЗрж▓ржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржмрж┐ржжрзНржпржорж╛ржиред")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

@dp.message(Command("add_bot"))
async def add_earning_bot_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        parts = message.text.split(" ", 3) # /add_bot Name: Desc: Link:
        if len(parts) < 4 or not all(p.endswith(":") for p in parts[1:3]):
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /add_bot Bot Name: <name> Bot Description: <desc> Bot Link: <link>")
        
        bot_name = parts[1].replace("Name:", "").strip()
        bot_desc = parts[2].replace("Description:", "").strip()
        bot_link = parts[3].replace("Link:", "").strip()

        cur.execute("INSERT INTO earning_bots (name, description, link) VALUES (?, ?, ?)", (bot_name, bot_desc, bot_link))
        conn.commit()
        await message.reply(f"тЬЕ ржмржЯ '{bot_name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛред")
    except sqlite3.IntegrityError:
        await message.reply(f"тЪая╕П ржПржЗ ржмржЯржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржмрж┐ржжрзНржпржорж╛ржиред")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")


# --- Employee Self-Registration: New command `join_employee` ---
@dp.message(Command("join_employee"))
async def self_join_employee_handler(message: types.Message, state: FSMContext):
    username = message.from_user.username
    telegram_id = message.from_user.id
    if not username:
        return await message.reply("тЭМ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЗржЙржЬрж╛рж░ржирзЗржо рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рзЗржЯрж┐ржВрж╕ ржерзЗржХрзЗ рж╕рзЗржЯ ржХрж░рзБржиред")
    
    cur.execute("SELECT username, banned FROM employees WHERE username = ? OR telegram_id = ?", (username, telegram_id))
    employee_data = cur.fetchone()

    if employee_data:
        if employee_data[1]: # Check if banned
            return await message.reply("ЁЯЪл ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржПржЗ ржмржЯ ржерзЗржХрзЗ ржирж┐рж╖рж┐ржжрзНржз (banned) рж╣ржпрж╝рзЗржЫрзЗржиред ржЖржкржирж┐ ржпрзБржХрзНржд рж╣рждрзЗ ржкрж╛рж░ржмрзЗржи ржирж╛ред")
        else:
            return await message.reply("тД╣я╕П ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржХржЬржи ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржмржирзНржзрж┐ржд ржЖржЫрзЗржиред")
    
    # Add to employees table with profile_set = 0 and banned = 0
    cur.execute("INSERT INTO employees (username, telegram_id, profile_set, banned) VALUES (?, ?, ?, ?)", (username, telegram_id, 0, 0))
    conn.commit()
    await message.reply(f"тЬЕ @{username} ржЖржкржирж╛ржХрзЗ ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣рж┐рж╕рзЗржмрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛ! ржПржЦржи ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛рж░ ржкрж╛рж▓рж╛ред")
    
    # Start profile setup FSM
    await state.set_state(ProfileSetup.name)
    await message.answer("ржЖржкржирж╛рж░ <b>ржкрзБрж░рзЛ ржирж╛ржо</b> рж▓рж┐ржЦрзБржи:")


# --- Profile Management (FSM) ---

@dp.message(Command("set_profile", "change_profile"))
async def start_profile_setup(message: types.Message, state: FSMContext):
    username = message.from_user.username
    cur.execute("SELECT username FROM employees WHERE username = ?", (username,))
    if not cur.fetchone():
        return await message.reply("тЭМ ржЖржкржирж┐ ржПржоржкрзНрж▓ржпрж╝рж┐ ржиржиред`/join_employee` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржпрзБржХрзНржд рж╣ржиред")
    
    await state.set_state(ProfileSetup.name)
    await message.answer("ржЖржкржирж╛рж░ <b>ржкрзБрж░рзЛ ржирж╛ржо</b> рж▓рж┐ржЦрзБржи:")

@dp.message(ProfileSetup.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>ржлрзЛржи ржиржорзНржмрж░</b> рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.phone)

@dp.message(ProfileSetup.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>ржЗржорзЗржЗрж▓</b> рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.email)

@dp.message(ProfileSetup.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░</b> рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.bkash)

@dp.message(ProfileSetup.bkash)
async def process_bkash(message: types.Message, state: FSMContext):
    await state.update_data(bkash_number=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>Binance ID</b> рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.binance_id)

@dp.message(ProfileSetup.binance_id)
async def process_binance(message: types.Message, state: FSMContext):
    await state.update_data(binance_id=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>Youtube Link</b> (ржпржжрж┐ ржерж╛ржХрзЗ) рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.youtube)

@dp.message(ProfileSetup.youtube)
async def process_youtube(message: types.Message, state: FSMContext):
    await state.update_data(youtube_link=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>Facebook Link</b> (ржпржжрж┐ ржерж╛ржХрзЗ) рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.facebook)

@dp.message(ProfileSetup.facebook)
async def process_facebook(message: types.Message, state: FSMContext):
    await state.update_data(facebook_link=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>TikTok Link</b> (ржпржжрж┐ ржерж╛ржХрзЗ) рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.tiktok)

@dp.message(ProfileSetup.tiktok)
async def process_tiktok(message: types.Message, state: FSMContext):
    await state.update_data(tiktok_link=message.text)
    await message.answer("ржЖржкржирж╛рж░ <b>Website Link</b> (ржпржжрж┐ ржерж╛ржХрзЗ) рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.website)

@dp.message(ProfileSetup.website)
async def process_website(message: types.Message, state: FSMContext):
    await state.update_data(website_link=message.text)
    await message.answer("ржЖржкржирж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ <b>ржХрж┐ржЫрзБ ржХржерж╛</b> рж▓рж┐ржЦрзБржи:")
    await state.set_state(ProfileSetup.about_yourself)

@dp.message(ProfileSetup.about_yourself)
async def process_about_yourself(message: types.Message, state: FSMContext):
    await state.update_data(about_yourself=message.text)
    
    user_data = await state.get_data()
    username = message.from_user.username

    cur.execute("""
        UPDATE employees SET
        profile_set = ?, full_name = ?, phone_number = ?, email = ?,
        bkash_number = ?, binance_id = ?, youtube_link = ?,
        facebook_link = ?, tiktok_link = ?, website_link = ?,
        about_yourself = ?
        WHERE username = ?
    """, (
        1, user_data['full_name'], user_data['phone_number'], user_data['email'],
        user_data['bkash_number'], user_data['binance_id'], user_data['youtube_link'],
        user_data['facebook_link'], user_data['tiktok_link'], user_data['website_link'],
        user_data['about_yourself'], username
    ))
    conn.commit()
    
    await message.reply("тЬЕ ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рзЗржЯ/ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
    await state.clear()

@dp.message(Command("my_profile"))
async def my_profile_handler(message: types.Message):
    username = message.from_user.username
    if not username:
        return await message.reply("тЭМ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЗржЙржЬрж╛рж░ржирзЗржо рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")
    
    cur.execute("""
        SELECT full_name, phone_number, email, bkash_number, binance_id,
               youtube_link, facebook_link, tiktok_link, website_link, about_yourself,
               profile_set
        FROM employees WHERE username = ?
    """, (username,))
    profile_data = cur.fetchone()

    if not profile_data:
        return await message.reply("тЭМ ржЖржкржирж┐ ржПржХржЬржи ржирж┐ржмржирзНржзрж┐ржд ржХрж░рзНржоржЪрж╛рж░рзА ржиржиред `/join_employee` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржпрзБржХрзНржд рж╣ржиред")
    
    (full_name, phone, email, bkash, binance, youtube, facebook, tiktok, website, about, profile_set) = profile_data

    if not profile_set:
        return await message.reply("тЪая╕П ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред `/set_profile` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рзБржиред")

    profile_text = (
        f"ЁЯСд <b>ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓:</b>\n\n"
        f"<b>ржирж╛ржо:</b> {full_name or 'N/A'}\n"
        f"<b>ржлрзЛржи:</b> {phone or 'N/A'}\n"
        f"<b>ржЗржорзЗржЗрж▓:</b> {email or 'N/A'}\n"
        f"<b>ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░:</b> {bkash or 'N/A'}\n"
        f"<b>Binance ID:</b> {binance or 'N/A'}\n"
        f"<b>Youtube:</b> {youtube or 'N/A'}\n"
        f"<b>Facebook:</b> {facebook or 'N/A'}\n"
        f"<b>TikTok:</b> {tiktok or 'N/A'}\n"
        f"<b>Website:</b> {website or 'N/A'}\n"
        f"<b>About:</b> {about or 'N/A'}\n\n"
        "ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ: `/change_profile`"
    )
    await message.reply(profile_text, parse_mode=ParseMode.HTML)


# --- Employee Commands List (updated) ---
@dp.message(Command("em_cmd", "my_cmd")) # Added my_cmd as an alias
async def employee_command_list(message: types.Message):
    commands_text = (
        "ЁЯУЛ <b>ржПржоржкрзНрж▓ржпрж╝рж┐ ржХржорж╛ржирзНржбрж╕ржорзВрж╣:</b>\n\n"
        "/start - ржмржЯрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж╛ рж╢рзБрж░рзБ ржХрж░рзБржи\n"
        "/em_cmd (ржмрж╛ /my_cmd) - ржПржЗ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
        "/get_task - ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж▓рж┐ржВржХ ржкрж╛ржи\n"
        "/my_views - ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ ржнрж┐ржЙ рж╕ржВржЦрзНржпрж╛ ржжрзЗржЦрзБржи\n"
        "/my_profile - ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп ржжрзЗржЦрзБржи\n"
        "/set_profile (ржмрж╛ /change_profile) - ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ/ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи\n"
        "/my_balance - ржЖржкржирж╛рж░ USDT ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржи\n"
        "/withdraw_usdt - ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рзБржи\n"
    )
    await message.reply(commands_text, parse_mode=ParseMode.HTML)


# --- Existing Commands (modified) ---

# Admin Commands List (from previous, now with new commands)
@dp.message(Command("ad_cmd"))
async def admin_command_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    
    commands_text = (
        "ЁЯУЛ <b>ржЕрзНржпрж╛ржбржорж┐ржи ржХржорж╛ржирзНржбрж╕ржорзВрж╣:</b>\n\n"
        "/ad_cmd - ржПржЗ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
        "/em_cmd - ржПржоржкрзНрж▓ржпрж╝рж┐ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
        "/add_employee @username <Telegram_ID> - ржирждрзБржи ржХрж░рзНржоржЪрж╛рж░рзА ржпрзБржХрзНржд ржХрж░рзБржи (ржЕрзНржпрж╛ржбржорж┐ржи ржЕржирзБржорзЛржжрж┐ржд)\n"
        "/delete_employee @username - ржХрж░рзНржоржЪрж╛рж░рзА ржорзБржЫрзЗ ржлрзЗрж▓рзБржи\n"
        "/list_employees - рж╕ржХрж▓ ржХрж░рзНржоржЪрж╛рж░рзАрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
        "/click_user_list - рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ ржХрзНрж▓рж┐ржХ ржХрж░рж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n" # NEW
        "/band_employee @username - ржХрж░рзНржоржЪрж╛рж░рзАржХрзЗ ржирж┐рж╖рж┐ржжрзНржз ржХрж░рзБржи\n" # NEW
        "/add_domain <name> <base_url> - ржирждрзБржи ржбрзЛржорзЗржЗржи ржпрзЛржЧ ржХрж░рзБржи\n"
        "/delete_domain <name> - ржбрзЛржорзЗржЗржи ржорзБржЫрзЗ ржлрзЗрж▓рзБржи\n"
        "/list_domains - рж╕ржХрж▓ ржбрзЛржорзЗржЗржи рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
        "/add_channel Channel Name: <name> Channel Description: <desc> Channel Link: <link> - ржирждрзБржи ржЪрзНржпрж╛ржирзЗрж▓ ржпрзЛржЧ ржХрж░рзБржи\n"
        "/add_bot Bot Name: <name> Bot Description: <desc> Bot Link: <link> - ржирждрзБржи ржЖрж░рзНржирж┐ржВ ржмржЯ ржпрзЛржЧ ржХрж░рзБржи\n"
        "/set_global_task <domain_name> <task_identifier> - рж╕ржХрж▓ ржХрж░рзНржоржЪрж╛рж░рзАрж░ ржЬржирзНржп ржЧрзНрж▓рзЛржмрж╛рж▓ ржЯрж╛рж╕рзНржХ рж╕рзЗржЯ ржХрж░рзБржи\n"
        "/assign_task @username <domain_name> <task_identifier> - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзНржоржЪрж╛рж░рзАржХрзЗ ржЯрж╛рж╕рзНржХ ржжрж┐ржи\n"
        "/report - ржЯрж╛рж╕рзНржХ ржПржмржВ ржнрж┐ржЙ рж░рж┐ржкрзЛрж░рзНржЯ ржжрзЗржЦрзБржи\n"
        "/post_all <ржЖржкржирж╛рж░_ржорзЗрж╕рзЗржЬ> - рж╕ржХрж▓ ржХрж░рзНржоржЪрж╛рж░рзАржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржи\n"
        "/post_to_employee @username <ржЖржкржирж╛рж░_ржорзЗрж╕рзЗржЬ> - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзНржоржЪрж╛рж░рзАржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржи\n"
        "/set_usdt <amount> - ржкрзНрж░рждрж┐ 1000 ржнрж┐ржЬрж┐ржЯ ржПрж░ ржЬржирзНржп USDT рж░рзЗржЯ рж╕рзЗржЯ ржХрж░рзБржи (ржпрзЗржоржи: /set_usdt 1.00)\n"
        "/em_visit_add @username <visits> - ржХрж░рзНржоржЪрж╛рж░рзАрж░ ржнрж┐ржЬрж┐ржЯ ржпрзЛржЧ ржХрж░рзБржи (ржпрзЗржоржи: /em_visit_add @user 115)\n"
        "/em_visit_minus @username <visits> - ржХрж░рзНржоржЪрж╛рж░рзАрж░ ржнрж┐ржЬрж┐ржЯ ржХрж╛ржЯрзБржи (ржпрзЗржоржи: /em_visit_minus @user 115)\n"
        # /clear_data commands will be added later due to complexity
        # /add_editor, /track_editors will be added later
    )
    await message.reply(commands_text, parse_mode=ParseMode.HTML)


# Admin Employee Management (already exists, but updated for 'banned' status)
@dp.message(Command("add_employee"))
async def admin_add_employee_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!") # Only admin can use this form of add_employee
    try:
        parts = message.text.split()
        if len(parts) < 2:
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /add_employee @username <Telegram_ID (ржРржЪрзНржЫрж┐ржХ)>")
        
        username = parts[1].replace('@', '')
        telegram_id = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None

        cur.execute("SELECT banned FROM employees WHERE username = ?", (username,))
        existing_employee = cur.fetchone()

        if existing_employee:
            if existing_employee[0]: # If banned, unban them
                cur.execute("UPDATE employees SET banned = 0, telegram_id = ? WHERE username = ?", (telegram_id, username))
                conn.commit()
                await message.reply(f"тЬЕ @{username} (ID: {telegram_id if telegram_id else 'N/A'}) ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржиржмрзНржпрж╛ржи ржХрж░рж╛ рж╣рж▓рзЛ ржПржмржВ ржПржоржкрзНрж▓рзЯрж┐ рж╣рж┐рж╕рзЗржмрзЗ ржкрзБржиржГржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛ!")
            else:
                await message.reply(f"тД╣я╕П @{username} ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржХржЬржи ржПржоржкрзНрж▓ржпрж╝рж┐ рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржмржирзНржзрж┐ржд ржЖржЫрзЗржиред")
        else:
            cur.execute("INSERT INTO employees (username, telegram_id, banned) VALUES (?, ?, ?)", (username, telegram_id, 0))
            conn.commit()
            await message.reply(f"тЬЕ @{username} (ID: {telegram_id if telegram_id else 'N/A'}) ржХрзЗ ржПржоржкрзНрж▓рзЯрж┐ рж╣рж┐рж╕рзЗржмрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛ!")
    except (IndexError, ValueError):
        await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /add_employee @username <Telegram_ID (ржРржЪрзНржЫрж┐ржХ)>")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

@dp.message(Command("delete_employee"))
async def delete_employee(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        username = message.text.split()[1].replace('@', '')
        cur.execute("DELETE FROM employees WHERE username = ?", (username,))
        cur.execute("DELETE FROM individual_tasks WHERE employee_username = ?", (username,)) # Delete associated tasks
        conn.commit()
        if cur.rowcount > 0:
            await message.reply(f"тЬЕ @{username} ржХрзЗ ржПржоржкрзНрж▓рзЯрж┐ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рж▓рзЛ ржПржмржВ рждрж╛рж░ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛржУ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рж▓рзЛред")
        else:
            await message.reply(f"тД╣я╕П @{username} ржирж╛ржорзЗ ржХрзЛржирзЛ ржПржоржкрзНрж▓рзЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    except IndexError:
        await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /delete_employee @username")

@dp.message(Command("band_employee")) # NEW
async def band_employee_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        username = message.text.split()[1].replace('@', '')
        cur.execute("UPDATE employees SET banned = 1 WHERE username = ?", (username,))
        conn.commit()
        if cur.rowcount > 0:
            await message.reply(f"тЬЕ @{username} ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржирж┐рж╖рж┐ржжрзНржз (banned) ржХрж░рж╛ рж╣рж▓рзЛред рж╕рзЗ ржЖрж░ ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржЬрзЯрзЗржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред")
        else:
            await message.reply(f"тД╣я╕П @{username} ржирж╛ржорзЗ ржХрзЛржирзЛ ржПржоржкрзНрж▓рзЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    except IndexError:
        await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /band_employee @username")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

@dp.message(Command("list_employees"))
async def list_employees(message: types.Message):
    if not (is_admin(message.from_user.id) or is_editor(message.from_user.id)): # Admins and Editors can see
        return await message.reply("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!")
    
    cur.execute("SELECT username, full_name, total_visits, usdt_balance, banned FROM employees")
    employees = cur.fetchall()
    if not employees:
        return await message.reply("тД╣я╕П ржХрзЛржирзЛ ржПржоржкрзНрж▓рзЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    
    employee_list_text = "ЁЯСе <b>ржПржоржкрзНрж▓рзЯрж┐ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:</b>\n\n"
    for emp_username, emp_full_name, total_visits, usdt_balance, banned_status in employees:
        status_text = "ЁЯЪл Banned" if banned_status else ""
        employee_list_text += (
            f"<b>@{emp_username}</b> ({emp_full_name or 'N/A'}) {status_text}\n"
            f"  ЁЯСБя╕П ржнрж┐ржЬрж┐ржЯ: {total_visits}, ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {usdt_balance:.2f} USDT\n"
        )
    await message.reply(employee_list_text, parse_mode=ParseMode.HTML)

@dp.message(Command("click_user_list")) # NEW
async def click_user_list_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    
    # Select distinct viewer_username and viewer_full_name from clicks
    # Exclude those who are also employees
    cur.execute("""
        SELECT DISTINCT c.viewer_username, c.viewer_full_name, c.viewer_telegram_id
        FROM clicks c
        LEFT JOIN employees e ON c.viewer_username = e.username OR c.viewer_telegram_id = e.telegram_id
        WHERE e.username IS NULL
    """)
    clicked_users = cur.fetchall()

    if not clicked_users:
        return await message.reply("тД╣я╕П ржХрзЛржирзЛ ржиржи-ржПржоржкрзНрж▓ржпрж╝рж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗржирж┐ред")
    
    user_list_text = "ЁЯСд <b>рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ ржХрзНрж▓рж┐ржХ ржХрж░рж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА (ржиржи-ржПржоржкрзНрж▓рзЯрж┐):</b>\n\n"
    for username, full_name, telegram_id in clicked_users:
        user_list_text += f"тАв <b>{full_name or 'N/A'}</b> (@{username or 'N/A'}) [ID: {telegram_id or 'N/A'}]\n"
    await message.reply(user_list_text, parse_mode=ParseMode.HTML)


# --- Balance and Visit Adjustment ---

@dp.message(Command("set_usdt"))
async def set_usdt_rate_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        parts = message.text.split()
        if len(parts) < 2:
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /set_usdt <amount> (ржпрзЗржоржи: 1.00)")
        
        usdt_amount = float(parts[1])
        if usdt_amount <= 0:
            return await message.reply("тЭМ USDT рж░рзЗржЯ ржЕржмрж╢рзНржпржЗ 0 ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред")
        
        cur.execute("INSERT OR REPLACE INTO global_settings (key, value) VALUES (?, ?)", ('usdt_rate_per_1000_visits', str(usdt_amount)))
        conn.commit()
        await message.reply(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ 1000 ржнрж┐ржЬрж┐ржЯ ржПрж░ ржЬржирзНржп USDT рж░рзЗржЯ рж╕рзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ: {usdt_amount:.2f} USDT")
    except ValueError:
        await message.reply("тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛ред рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /set_usdt <amount>")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

@dp.message(Command("em_visit_add"))
async def employee_visit_add_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /em_visit_add @username <visits>")
        
        target_username = parts[1].replace('@', '')
        visits_to_add = int(parts[2])
        if visits_to_add <= 0:
            return await message.reply("тЭМ ржпрзЛржЧ ржХрж░рж╛рж░ ржнрж┐ржЬрж┐ржЯ рж╕ржВржЦрзНржпрж╛ ржЕржмрж╢рзНржпржЗ 0 ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред")
        
        cur.execute("UPDATE employees SET total_visits = total_visits + ? WHERE username = ?", (visits_to_add, target_username))
        conn.commit()
        if cur.rowcount == 0:
            return await message.reply(f"тД╣я╕П @{target_username} ржирж╛ржорзЗ ржХрзЛржирзЛ ржХрж░рзНржоржЪрж╛рж░рзА ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        
        await message.reply(f"тЬЕ @{target_username} ржПрж░ ржнрж┐ржЬрж┐ржЯ рж╕ржВржЦрзНржпрж╛ржпрж╝ {visits_to_add} ржнрж┐ржЬрж┐ржЯ ржпрзЛржЧ ржХрж░рж╛ рж╣рж▓рзЛред")
    except ValueError:
        await message.reply("тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛ред рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /em_visit_add @username <visits>")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")

@dp.message(Command("em_visit_minus"))
async def employee_visit_minus_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("тЭМ ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржи!")
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("тЪая╕П рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /em_visit_minus @username <visits>")
        
        target_username = parts[1].replace('@', '')
        visits_to_minus = int(parts[2])
        if visits_to_minus <= 0:
            return await message.reply("тЭМ ржХржорж╛ржирзЛрж░ ржнрж┐ржЬрж┐ржЯ рж╕ржВржЦрзНржпрж╛ ржЕржмрж╢рзНржпржЗ 0 ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред")
        
        # Ensure total_visits doesn't go below zero
        cur.execute("UPDATE employees SET total_visits = MAX(0, total_visits - ?) WHERE username = ?", (visits_to_minus, target_username))
        conn.commit()
        if cur.rowcount == 0:
            return await message.reply(f"тД╣я╕П @{target_username} ржирж╛ржорзЗ ржХрзЛржирзЛ ржХрж░рзНржоржЪрж╛рж░рзА ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        
        await message.reply(f"тЬЕ @{target_username} ржПрж░ ржнрж┐ржЬрж┐ржЯ рж╕ржВржЦрзНржпрж╛ ржерзЗржХрзЗ {visits_to_minus} ржнрж┐ржЬрж┐ржЯ ржХржорж╛ржирзЛ рж╣рж▓рзЛред")
    except ValueError:
        await message.reply("тЭМ ржЕржмрзИржз рж╕ржВржЦрзНржпрж╛ред рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи: /em_visit_minus @username <visits>")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")


@dp.message(Command("my_balance"))
async def my_balance_handler(message: types.Message):
    username = message.from_user.username
    if not username:
        return await message.reply("тЭМ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЗржЙржЬрж╛рж░ржирзЗржо рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")
    
    cur.execute("SELECT total_visits, usdt_balance FROM employees WHERE username = ?", (username,))
    employee_data = cur.fetchone()

    if not employee_data:
        return await message.reply("тЭМ ржЖржкржирж┐ ржПржХржЬржи ржирж┐ржмржирзНржзрж┐ржд ржХрж░рзНржоржЪрж╛рж░рзА ржиржиред `/join_employee` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржпрзБржХрзНржд рж╣ржиред")
    
    total_visits = employee_data[0]
    current_usdt_balance = employee_data[1] 

    cur.execute("SELECT value FROM global_settings WHERE key = 'usdt_rate_per_1000_visits'")
    usdt_rate_str = cur.fetchone()
    usdt_rate = float(usdt_rate_str[0]) if usdt_rate_str else 0.0 

    calculated_usdt = (total_visits / 1000) * usdt_rate

    # Check for pending withdrawals
    cur.execute("SELECT COUNT(*) FROM withdraw_requests WHERE employee_username = ? AND status = 'pending'", (username,))
    pending_withdrawals = cur.fetchone()[0]

    await message.reply(
        f"ЁЯТ░ <b>ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕:</b>\n"
        f"ЁЯСБя╕П ржорзЛржЯ ржнрж┐ржЬрж┐ржЯ: {total_visits}\n"
        f"ЁЯТ╡ ржЖржирзБржорж╛ржирж┐ржХ USDT ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {calculated_usdt:.2f} USDT\n"
        f"ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЙрждрзНрждрзЛрж▓ржиржпрзЛржЧрзНржп ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {current_usdt_balance:.2f} USDT\n"
        f"ржкрзЗржирзНржбрж┐ржВ ржЙрждрзНрждрзЛрж▓ржи: {pending_withdrawals}ржЯрж┐\n\n"
        f"ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ: `/withdraw_usdt`"
    , parse_mode=ParseMode.HTML)


# --- Withdrawal System (Employee Side) ---
@dp.message(Command("withdraw_usdt"))
async def start_withdraw(message: types.Message, state: FSMContext):
    username = message.from_user.username
    cur.execute("SELECT usdt_balance, profile_set, bkash_number, binance_id FROM employees WHERE username = ?", (username,))
    employee_data = cur.fetchone()

    if not employee_data:
        return await message.reply("тЭМ ржЖржкржирж┐ ржПржХржЬржи ржирж┐ржмржирзНржзрж┐ржд ржХрж░рзНржоржЪрж╛рж░рзА ржиржиред `/join_employee` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржпрзБржХрзНржд рж╣ржиред")
    
    usdt_balance = employee_data[0]
    profile_set = employee_data[1]
    bkash_number = employee_data[2]
    binance_id = employee_data[3]

    if not profile_set:
        return await message.reply("тЪая╕П ржЙрждрзНрждрзЛрж▓ржи ржХрж░рж╛рж░ ржЖржЧрзЗ ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи: `/set_profile`")

    if usdt_balance < 1.00: # Minimum withdrawal amount
        return await message.reply(f"тЭМ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржХржоржкржХрзНрж╖рзЗ 1.00 USDT ржерж╛ржХрждрзЗ рж╣ржмрзЗред ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {usdt_balance:.2f} USDT")

    amounts = [1.00, 5.00, 10.00, 30.00, 100.00]
    available_amounts = [amt for amt in amounts if usdt_balance >= amt]

    if not available_amounts:
        return await message.reply(f"тЭМ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ {usdt_balance:.2f} USDT ржжрж┐ржпрж╝рзЗ ржХрзЛржирзЛ ржЙрждрзНрждрзЛрж▓ржи рж╕ржорзНржнржм ржиржпрж╝ред")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"Withdraw ${amt:.2f}")] for amt in available_amounts
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("ржЖржкржирж┐ ржХржд USDT ржЙрждрзНрждрзЛрж▓ржи ржХрж░рждрзЗ ржЪрж╛ржи? (ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {usdt_balance:.2f} USDT)", reply_markup=keyboard)
    await state.set_state(Withdrawal.amount)

@dp.message(Withdrawal.amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        text = message.text.replace("Withdraw $", "")
        amount = float(text)
        
        username = message.from_user.username
        cur.execute("SELECT usdt_balance FROM employees WHERE username = ?", (username,))
        current_balance = cur.fetchone()[0]

        if amount <= 0:
            return await message.reply("тЭМ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг ржЕржмрж╢рзНржпржЗ 0 ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред")

        if amount > current_balance:
            return await message.reply(f"тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпржерзЗрж╖рзНржЯ ржиржпрж╝ред ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {current_balance:.2f} USDTред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг ржмрзЗржЫрзЗ ржирж┐ржи ржмрж╛ ржЯрж╛ржЗржк ржХрж░рзБржиред")
        
        await state.update_data(usdt_amount=amount)

        # Ask for payment method
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="Bkash")],
                [types.KeyboardButton(text="Binance")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("ржХрзЛржи ржорж╛ржзрзНржпржорзЗ ржкрзЗржорзЗржирзНржЯ ржирж┐рждрзЗ ржЪрж╛ржи?", reply_markup=keyboard)
        await state.set_state(Withdrawal.payment_method)

    except ValueError:
        await message.reply("тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг ржмрзЗржЫрзЗ ржирж┐ржи ржмрж╛ рж╕ржВржЦрзНржпрж╛ржпрж╝ ржЯрж╛ржЗржк ржХрж░рзБржиред")
    except Exception as e:
        await message.reply(f"тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {e}")
        await state.clear()

@dp.message(Withdrawal.payment_method)
async def process_withdraw_payment_method(message: types.Message, state: FSMContext):
    payment_method = message.text
    if payment_method not in ["Bkash", "Binance"]:
        return await message.reply("тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ 'Bkash' ржЕржержмрж╛ 'Binance' ржмрзЗржЫрзЗ ржирж┐ржиред")
    
    username = message.from_user.username
    cur.execute("SELECT bkash_number, binance_id FROM employees WHERE username = ?", (username,))
    profile_data = cur.fetchone()
    bkash_number = profile_data[0]
    binance_id = profile_data[1]

    if payment_method == "Bkash" and not bkash_number:
        return await message.reply("тЪая╕П ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓рзЗ ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рзЗржЯ ржХрж░рзБржи `/set_profile`")
    if payment_method == "Binance" and not binance_id:
        return await message.reply("тЪая╕П ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓рзЗ Binance ID рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рзЗржЯ ржХрж░рзБржи `/set_profile`")

    await state.update_data(payment_method=payment_method)
    await message.answer("ржЙрждрзНрждрзЛрж▓ржи рж╕ржорзНржкрж░рзНржХрзЗ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржоржирзНрждржмрзНржп ржерж╛ржХрж▓рзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рзмрзж ржЕржХрзНрж╖рж░рзЗрж░ ржоржзрзНржпрзЗ рж▓рж┐ржЦрзБржи (ржРржЪрзНржЫрж┐ржХ, ржирж╛ ржерж╛ржХрж▓рзЗ 'ржирж╛' рж▓рж┐ржЦрзБржи):")
    await state.set_state(Withdrawal.comment)

@dp.message(Withdrawal.comment)
async def process_withdraw_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    if comment.lower() == 'ржирж╛':
        comment = ""
    elif len(comment) > 60:
        return await message.reply("тЭМ ржоржирзНрждржмрзНржп рзмрзж ржЕржХрзНрж╖рж░рзЗрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред")
    
    await state.update_data(comment=comment)
    
    data = await state.get_data()
    username = message.from_user.username
    
    amount = data['usdt_amount']
    payment_method = data['payment_method']
    
    cur.execute("SELECT bkash_number, binance_id FROM employees WHERE username = ?", (username,))
    profile_data = cur.fetchone()
    payment_detail = profile_data[0] if payment_method == "Bkash" else profile_data[1]

    # Save withdrawal request to DB
    cur.execute("""
        INSERT INTO withdraw_requests (employee_username, usdt_amount, payment_method, payment_detail, comment)
        VALUES (?, ?, ?, ?, ?)
    """, (username, amount, payment_method, payment_detail, comment))
    conn.commit()

    await message.reply(
        f"тЬЕ ржЖржкржирж╛рж░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!\n"
        f"ржкрж░рж┐ржорж╛ржг: {amount:.2f} USDT\n"
        f"ржкрзЗржорзЗржирзНржЯ ржорж╛ржзрзНржпржо: {payment_method}\n"
        f"ржкрзЗржорзЗржирзНржЯ ржбрж┐ржЯрзЗржЗрж▓: {payment_detail}\n"
        f"ржоржирзНрждржмрзНржп: {comment if comment else 'ржирзЗржЗ'}\n\n"
        "ржЖржорж╛ржжрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрж░рзНржпрж╛рж▓рзЛржЪржирж╛ ржХрж░ржмрзЗржиред"
    , parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# --- Web Server for handling external HTTP requests (from footer.php) ---

async def track_click_handler(request):
    try:
        data = await request.json()
        ref_by_employee = data.get('ref')
        viewer_username = data.get('viewer_username') # From JS
        viewer_telegram_id = data.get('viewer_telegram_id') # From JS
        viewer_full_name = data.get('viewer_full_name') # From JS
        user_agent = data.get('user_agent', 'Unknown User')
        page_url = data.get('page_url', 'Unknown URL')
        is_visit_flag = data.get('is_visit', False) # True if JS sends after 12s
        is_telegram_browser = data.get('is_telegram_browser', False)

        today_date = datetime.date.today().isoformat()
        # More generalized unique daily key for 20 visits per user/device
        unique_daily_key_base = f"{viewer_telegram_id or viewer_username}_{today_date}"

        # Check daily visit limit (max 20 per day per user/device for a specific employee)
        cur.execute("""
            SELECT COUNT(*) FROM clicks 
            WHERE ref_by_employee = ? 
            AND (viewer_telegram_id = ? OR viewer_username = ?) 
            AND STRFTIME('%Y-%m-%d', timestamp) = ?
        """, (ref_by_employee, viewer_telegram_id, viewer_username, today_date))
        
        visits_today = cur.fetchone()[0]

        if visits_today >= 20:
            logging.info(f"Daily visit limit reached for {viewer_username} for employee {ref_by_employee}.")
            return web.json_response({"status": "limit_reached", "message": "Daily visit limit reached for this user."})


        # Check if this specific page+employee has been visited by this user today (to avoid double counting same page visit for the same day)
        # This is more precise unique_daily_key for the DB row.
        unique_entry_key = f"{viewer_telegram_id or viewer_username}_{today_date}_{ref_by_employee}_{page_url}"
        cur.execute("SELECT id FROM clicks WHERE unique_daily_key = ?", (unique_entry_key,))
        if cur.fetchone():
            logging.info(f"Duplicate click for {unique_entry_key}. Skipping.")
            return web.json_response({"status": "duplicate", "message": "Duplicate click for this specific page/user today."})


        # Insert into clicks table
        cur.execute("""
            INSERT INTO clicks (ref_by_employee, viewer_telegram_id, viewer_username, viewer_full_name,
                                user_agent, page_url, is_visit, is_click, is_telegram_browser, unique_daily_key)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            ref_by_employee, viewer_telegram_id, viewer_username, viewer_full_name,
            user_agent, page_url, is_visit_flag, True, is_telegram_browser, unique_entry_key
        ))
        conn.commit()

        # Update employee's total_visits/total_clicks
        if is_visit_flag:
            cur.execute("UPDATE employees SET total_visits = total_visits + 1 WHERE username = ?", (ref_by_employee,))
        cur.execute("UPDATE employees SET total_clicks = total_clicks + 1 WHERE username = ?", (ref_by_employee,))
        conn.commit()
        
        logging.info(f"Tracked click for ref: {ref_by_employee}, viewer: {viewer_username}, URL: {page_url}, Visit: {is_visit_flag}")

        if ADMIN_CHAT_ID:
            try:
                domain_name = urlparse(page_url).netloc
                status_emoji = "тЬЕ ржнрж┐ржЬрж┐ржЯ" if is_visit_flag else "ЁЯФЧ ржХрзНрж▓рж┐ржХ"
                await bot.send_message(
                    chat_id=int(ADMIN_CHAT_ID),
                    text=(f"<b>{status_emoji} рж░рзЗржХрж░рзНржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!</b>\n"
                          f"<b>рж░рзЗржлрж╛рж░рзЗрж▓:</b> <code>{ref_by_employee}</code>\n"
                          f"<b>ржбрзЛржорзЗржЗржи:</b> {domain_name}\n"
                          f"<b>ржкрзЗржЬ URL:</b> {hcode(page_url)}\n"
                          f"<b>ржнрж┐ржЙржпрж╝рж╛рж░:</b> {hbold(viewer_full_name)} (@{viewer_username})\n"
                          f"<b>ржмрзНрж░рж╛ржЙржЬрж╛рж░:</b> {'Telegram' if is_telegram_browser else 'External'}\n"
                          f"<b>ржЗржЙржЬрж╛рж░ ржПржЬрзЗржирзНржЯ:</b> <code>{user_agent}</code>"),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logging.error(f"Failed to send admin notification: {e}")
        
        return web.json_response({"status": "success", "message": "Click tracked successfully"})
    except Exception as e:
        logging.error(f"Error in track_click_handler: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)

# --- Main function to run both polling and web server ---
async def main() -> None:
    polling_task = asyncio.create_task(dp.start_polling(bot))

    app = web.Application()
    app.router.add_post('/track-click', track_click_handler)

    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Web server started on port {port}")

    await asyncio.gather(polling_task, site._server.wait_closed())

if __name__ == '__main__':
    asyncio.run(main())
